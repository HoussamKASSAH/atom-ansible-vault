--- lib/ansible-vault-utils.js	2017-10-13 15:48:50.097665700 +0200
+++ lib/ansible-vault-utils.js	2017-10-13 15:41:57.222719500 +0200
@@ -6,7 +6,7 @@
 import { File } from 'atom';
 import fs from 'fs';
 import ini from 'ini';
-
+import os from 'os';
 
 export default class AnsibleVaultUtils {
 
@@ -65,25 +65,46 @@
   }
 
   VaultFile(vault_filepath, action, password_file, unlinkF) {
+
       let father = this;
       cmd = [atom.config.get('ansible-vault.path'), action, "--vault-password-file=" + password_file, vault_filepath].join(' ');
       if (atom.config.get("ansible-vault.vault_password_file_flag")) {
         project_path = atom.project.relativizePath(vault_filepath)[0]
       } else { project_path = ''; }
 
-
-      const execChild = require('child_process').exec;
-      execChild(cmd, { cwd: project_path } ,(error, stdout, stderr) => {
-          if (error) {
-              exitCode = 1;
-              output = stderr;
+      if (os.platform() == "win32") {
+        homepath = require('os').homedir();
+        child = require('child_process').spawn('cmd',['/d','/s','/c'].concat(cmd.split(' ')), { stdio: ['pipe','pipe','pipe'], shell: true, encoding: 'utf8'})
+        father.notifyMessage(0,"Waiting...","");
+        let outtxt = "";
+        let errtxt = "";
+        child.stderr.on('data', (error) => {
+          errtxt += errtxt + error;
+        });
+        child.on('close', (exitCode) => {
+          if (errtxt) {
+              outtxt = errtxt;
           } else {
-              exitCode = 0;
-              output = vault_filepath + ": OK"
+              outtxt = vault_filepath + ": OK"
           }
-          father.notifyMessage(exitCode,output,stderr);
-          if (unlinkF) fs.unlink(password_file,() => {});
-      });
+          father.notifyMessage(exitCode,outtxt,errtxt);
+          if (unlinkF) fs.unlink(password_file,() => {})
+        });
+        child.stdin.end();
+      } else {
+        const execChild = require('child_process').exec;
+        execChild(cmd, { cwd: project_path } ,(error, stdout, stderr) => {
+            if (error) {
+                exitCode = 1;
+                output = stderr;
+            } else {
+                exitCode = 0;
+                output = vault_filepath + ": OK"
+            }
+            father.notifyMessage(exitCode,output,stderr);
+            if (unlinkF) fs.unlink(password_file,() => {});
+        });
+      }
   }
 
   ExecAction(vault_filepath, action, password) {

